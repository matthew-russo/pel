module Arrays {
  func <T> copy(src: [T], start: int, end: int, dst: [T], dst_start: int) {

  }

  func <T> contains(src: [T], to_find: T) -> bool {
    for t in src {
      if ops::Equals(t.equals, to_find) {
        return true;
      }
    }

    return false;
  }

  func <T> contains_sequence(src: [T], to_find: [T]) -> bool {
    let to_find_ptr: int = 0;

    for t in src {
      if ops::Equals(src[t], to_find[to_find_ptr]) {
        to_find_ptr: int = to_find_ptr + 1;
        if to_find_ptr >= Arrays::length(to_find) {
          return true;
        }
      } else {
        to_find_ptr: int := 0;
      }
    }

    return false;
  }

  func <T> length(src: [T]) -> int {
      {{ this will be a native function }}
  }

  func <T> subsequence(src: [T], begin: int, end: int) -> [T] {
    for i: int := begin; i < end; i = i + 1 {

    }
  }

  func <T> replace(src: [T], to_replace: T, to_replace_with: T) -> [T] {

  }
}
