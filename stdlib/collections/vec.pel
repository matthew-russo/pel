object Vec<<T>> {
  fields {
    internal: [T],
    len: int,
    capacity: int,
  }

  methods {
    func len(self) -> int; {
      return self.len;
    }

    func get(self, i: int) -> T; {
      return internal[i];
    }

    func set(self, i: int, t: T) -> T; {
      let temp: T := self.internal[i];
      let self.internals[i]: T := t;
      return temp;
    }

    func add(self, t: T) {
      if self.len == self.capacity {
        self.double_capacity();
      };

      let self.len: int := self.len + 1;
      let self.internal[self.len]: T := t;
    }

    func append(self, other: Self<<T>>) {
      for let i: int := 0; i < other.len(); let i: int := i + 1; {
        self.add(other.get(i));
      };
    } 

    func concat(self, other: Self<<T>>) -> Self<<T>>; {
      let to_return: Self<<T>> := Vecs::empty();

      for let i: int := 0; i < self.len(); let i: int := i + 1; {
        to_return.add(self.get(i));
      };

      for let i: int := 0; i < other.len(); let i: int := i + 1; {
        to_return.add(other.get(i));
      };

      return to_return;
    }

    func double_capacity(self) {
      let new_internal: [T] := [T; capacity * 2];
      Array.copy(self.internal, new_internal);
      let self.internal: [T] := new_internal;
      let self.capacity: int := self.capacity * 2;
    }
  }
}

module Vecs {
  func empty<<T>>() -> Vec<<T>>; {
    return Vec<<T>> {
      internal: [T; 0],
      len: 0,
      capacity: 0,
    };
  }

  func singleton<<T>>(t: T) -> Vec<<T>>; {
    let v: Vec<<T>> := Vecs::empty<<T>>();
    v.add(t);
    return v;
  }
}
