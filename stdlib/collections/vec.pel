object Vec<<T>> {
  fields {
    internal: [T],
    len: int,
    capacity: int,
  }

  methods {
    func len(self) -> int; {
      return self.len;
    }

    func get(self, i: int) -> T; {
      return internal[i];
    }

    func set(self, i: int, t: T) -> T; {
      let temp: T := self.internal[i];
      let self.internals[i]: T := t;
      return temp;
    }

    func add(self, t: T) {
      if self.len == self.capacity {
        self.double_capacity();
      };

      let self.len: int := self.len + 1;
      let self.internal[self.len]: T := t;
    }

    func double_capacity(self) {
      let new_internal: [T] := [T; capacity * 2];
      Array.copy(self.internal, new_internal);
      let self.internal: [T] := new_internal;
      let self.capacity: int := self.capacity * 2;
    }
  }
}
