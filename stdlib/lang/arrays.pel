func copy@(T)(src: [T], start: int, end: int, dst: [T], dst_start: int) {
  let dst_ptr: int := dst_start;

  for let src_ptr: int := start; src_ptr < end; let src_ptr: int := src_ptr + 1; {
    let dst[dst_ptr]: T := src[src_ptr];
    let dst_ptr: int := dst_ptr + 1;
  };
}

func contains@(T)(src: [T], to_find: T) -> bool {
  for let i: int := 0; i < length(src); let i: int := i + 1; {
    if t.eq(to_find) {
      return true;
    };
  };

  return false;
}

func contains_sequence@(T)(src: [T], to_find: [T]) -> bool {
  let to_find_ptr: int := 0;

  for let i: int := 0; i < length(src); let i: int := i + 1; {
    if src[t].eq(to_find[to_find_ptr]) {
      let to_find_ptr: int := to_find_ptr + 1;
      if to_find_ptr >= Arrays::length(to_find) {
        return t;
      };
    } else {
      let to_find_ptr: int := 0;
    };
  };

  return false;
}

func subsequence@(T)(src: [T], begin: int, end: int) -> [T] {
  let subseq: [T] := [T; end - begin];
  let subseq_ptr: int := 0;

  for let src_ptr: int := begin; src_ptr < end; let src_ptr: int := src_ptr + 1 {
    let subseq[subseq_ptr]: T := src[src_ptr];
    let subseq_ptr: int := subseq_ptr + 1;
  };

  return subseq;
}

func replace@(T)(src: [T], to_replace: T, to_replace_with: T) -> [T] {
  let new_arr: [T] := [T; end - begin];

  for let i: int := begin; i < end; let i: int := i + 1; {
    if src[i].eq(to_replace) {
      let new_arr[i]: T := to_replace_with;
    } else {
      let new_arr[i]: T := src[i];
    };
  };

  return new_arr;
}
