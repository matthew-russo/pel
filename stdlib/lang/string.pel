use pel::lang::arrays;
use pel::ops::eq;

object String {
  fields {
    internal: [char],
  }

  methods {
    func concat(self, other: Self) -> Self {
      let new_length: int := self.length() + other.length();
      let new_chars: [char] := [char; new_length];
      Arrays::copy(self.internal, 0, self.length(), new_chars, 0);
      Arrays::copy(other.internal, 0, other.length(), new_chars, self.length());

      return Self {
        internal: new_chars,
      };
    }

    func contains(self, other: Self) -> bool {
      return Arrays::contains_sequence(self.internal, other.internal);
    }

    func contains_char(self, char_to_find: char) -> bool; {
      return Arrays::contains(self.internal, char_to_find);
    }

    func length(self) -> int; {
      return Arrays::length(self.internal);
    }

    func substring(self, begin: int, end: int) -> Self {
      let new_chars: [char] := Arrays::subsequence(self.internal, begin, end);
      
      return Self {
        internal: new_chars,
      };
    }

    func replace(self, from: char, to: char) -> Self {
      let new_chars: [char] := Arrays::replace(self.internal, from, to);

      return Self {
        internal: new_chars,
      };
    }

    func to_lower(self) -> Self {
      let new_chars: [char] := self
          .internal
          .map(|c| {
            return Char::to_lower(c);
          });

      return Self {
        internal: new_chars,
      };
    }

    func to_upper(self) -> Self {
      let new_chars: [char] := self.internal
          .map(|c| {
            return Char::to_upper(c);
          });

      return Self {
        internal: new_chars,
      };
    }
  }
}

implement Eq for String {
  func eq(self, other: Self) -> bool; {
    return Arrays::contents_equal(self.internal, other.internal);
  }

  func not_eq(self, other: Self) -> bool; {
    return !self.eq(other);
  }
}
